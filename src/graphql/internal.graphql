scalar ObjectId
scalar Date

#QUERY==========================================
type Query {
    GetMe: User!

    GetMyVehicles: [Vehicle!]!

    GetMyBankAccounts: [BankAccount!]!

    GetMyHostedTrips: [HostedTrip]!
    GetMyRequestedTrips: [RequestedTrip]!

    GetMySentNotifications: [Notification]!
    GetMyReceivedNotifications: [Notification]!

    GetMatchingRequestedTrips(hostedTripId: ObjectId!): [RequestedTripMatch!]!
}

type User {
    _id: ObjectId!
    mobile: String!
    email: String!
    preferredName: String!
    roleId: ObjectId!
    secret: Secret!
    currentCoord: [Float!]
    rating: UserRating!
}

type Role {
    _id: ObjectId!
    name: String!
    permissions: [Permission!]!
}

type Permission {
    _id: ObjectId!
    moduleId: ObjectId!
    value: String!
}

type Secret {
    hash: String!
}

type Module {
    _id: ObjectId!
    name: String!
}

type UserRating{
    politeness: Float!
    punctuality: Float!
    driving: Float!
}

type HostedTrip {
    _id: ObjectId!
    hostId: ObjectId!
    route: Route!
    time: TripTime!
    vehicleId: ObjectId #If vehicleId==null, vehicle is temporary
    vehicle: Vehicle #Could be a temporary or saved
    seats: Int!
    billing: TripBilling!
    rating: TripRating!
}

type Route {
    from: String!
    to: String!
    polyLines: [String!]
    keyCoords: [[Float!]!]
}

type TripTime {
    schedule: Date!
    start: Date
    end: Date
}

type Vehicle {
    _id: ObjectId!
    ownerId: ObjectId!
    name: String!
    number: String!
    model: String!
    features: VehicleFeatures!
    rating: VehicleRating!
}

type VehicleFeatures {
    ac: Boolean!
    luggage: Boolean!
}

type VehicleRating {
    cleanliness: Float!
    ac: Float!
}

type TripBilling {
    bankAccountId: ObjectId!
    priceFirstKm: Float!
    priceNextKm: Float!
}

type BankAccount {
    _id: ObjectId!
    ownerId: ObjectId!
    name: String!
    bank: String!
    account: String!
    branch: String!
}

type TripRating {
    punctuality: Float!
    politeness: Float!
    driving: Float!
    meetsCondition: Float!
}

type RequestedTrip {
    _id: ObjectId!
    requesterId: ObjectId!
    route: Route!
    time: TripTime!
    seats: Int!
}

type Notification {
    _id: ObjectId!
    senderId: ObjectId!
    recipientId: ObjectId!
    hostedTripId: ObjectId!
    requestedTripId: ObjectId!
    acceptedByRecipient: Boolean!
    payment: Payment!
}

type Payment {
    amount: Float!
    time: Date #When there is a time, payment is done
}

type RequestedTripMatch {
    hostedTripId: ObjectId!
    requestedTripId: ObjectId!
    results: [TripMatchResult!]!
}

type TripMatchResult {
    hostedTripLength: Float!
    requestedTripLength: Float!
    intersectionLength: Float!
    hostedTripCoverage: Float!
    requestedTripCoverage: Float!
    intersectionPolyLine: String!
}

#MUTATION========================================
type Mutation {
    SignIn(mobile: String!, password: String!): String!

    AddUser(user: UserInput!): ObjectId!
}

input UserInput {
    mobile: String!
    roleId: ObjectId!
    rating: UserRating!
    roleId: ObjectId!
    email: String!
    secret: Secret!
    preferredName: String!
}