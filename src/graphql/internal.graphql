scalar ObjectId
scalar Date

enum VehicleType {
    PERSONAL STAFF_SERVICE HIRED
}

enum VehicleClass {
    CAR VAN BIKE LORRY THREE_WHEELER
}

#ROOT===========================================
type Query {
    GetMe: User!
    GetMyVehicles(skip: Int, limit: Int @constraint(max: 10)): [Vehicle!]!
    GetMyBankAccounts(skip: Int, limit: Int @constraint(max: 10)): [BankAccount!]!

    GetMyHostedTrips(
        from: Date,
        to: Date,
        skip: Int,
        limit: Int @constraint(max: 10)
    ): [HostedTrip]!
    GetMyHostedTrip(_id: ObjectId!): HostedTrip!

    GetMyRequestedTrips(
        from: Date,
        to: Date,
        skip: Int,
        limit: Int @constraint(max: 10)
    ): [RequestedTrip]!
    GetMyRequestedTrip(_id: ObjectId!): RequestedTrip!

    GetMyHandshakes(
        tripId: ObjectId,
        sent: Boolean,
        skip: Int,
        limit: Int @constraint(max: 10)
    ): [Handshake]!
    GetMyHandshake(_id: ObjectId!): Handshake!

    GetMatchingRequestedTrips(hostedTripId: ObjectId!): [RequestedTripMatch!]!
}

type Mutation {
    CreateGenericUser(user: UserInput!): String!
    SignIn(mobile: String!, password: String!): String!

    AddVehicle(vehicle: VehicleInput!): ObjectId!

    AddBankAccount(bankAccount: BankAccountInput!): ObjectId!

    AddHostedTrip(hostedTrip: HostedTripInput!): ObjectId!

    AddRequestedTrip(requestedTrip: RequestedTripInput!): ObjectId!
}

#USER===========================================
type User {
    _id: ObjectId!
    isActive: Boolean!
    mobile: String!
    email: String!
    preferredName: String!
    roleId: ObjectId!
    secret: Secret!
    currentCoord: [Float!]
    rating: UserRating!
}

input UserInput {
    isActive: Boolean!
    mobile: String!
    roleId: ObjectId!
    rating: UserRating!
    email: String!
    secret: Secret!
    preferredName: String!
}

type Role {
    _id: ObjectId!
    name: String!
    permissions: [Permission!]!
}

type Permission {
    _id: ObjectId!
    moduleId: ObjectId!
    value: String!
}

type Secret {
    hash: String!
}

type Module {
    _id: ObjectId!
    name: String!
}

#RATING=========================================
type HostRating {
    politeness: Float!,
    punctuality: Float!,
    driving: Float!,
    meetsCondition: Float!,
}

type RequesterRating {
    politeness: Float!,
    punctuality: Float!,
}

type VehicleRating {
    cleanliness: Float!
    ac: Float!
}

type UserRating{
    asHost: HostRating!
    asRequester: RequesterRating!
}

type TripRating {
    host: HostRating!
    requester: RequesterRating!
    vehicle: VehicleRating!
}

#TIME===========================================
type TripTime {
    schedule: Date!
    start: Date
    end: Date
}

input TripTimeInput {
    schedule: Date!
}

type HandshakeTime {
    sent: Date!
    accepted: Date
}

#VEHICLE========================================
type Vehicle {
    _id: ObjectId!
    isActive: Boolean!
    ownerId: ObjectId #Only available for saved vehicles
    type: VehicleType!
    class: VehicleClass!
    name: String!
    number: String!
    model: String!
    features: VehicleFeatures!
    rating: VehicleRating!
}

input VehicleInput {
    isActive: Boolean!
    ownerId: ObjectId #Only required for saved vehicles
    type: VehicleType!
    class: VehicleClass!
    name: String!
    number: String!
    model: String!
    features: VehicleFeaturesInput!
    rating: VehicleRating!
}

type VehicleFeatures {
    ac: Boolean!
    luggage: Boolean!
}

input VehicleFeaturesInput {
    ac: Boolean!
    luggage: Boolean!
}

#TRIP===========================================
type HostedTrip {
    _id: ObjectId!
    hostId: ObjectId!
    route: HostedTripRoute!
    time: TripTime!
    vehicleId: ObjectId
    vehicle: Vehicle
    seats: Int!
    billing: TripBilling!
}

input HostedTripInput {
    hostId: ObjectId!
    route: HostedTripRouteInput!
    time: TripTimeInput!
    vehicleId: ObjectId
    vehicle: VehicleInput
    seats: Int!
    billing: TripBillingInput!
}

type TripBilling {
    bankAccountId: ObjectId!
    priceFirstKm: Float!
    priceNextKm: Float!
}

input TripBillingInput {
    bankAccountId: ObjectId!
    priceFirstKm: Float!
    priceNextKm: Float!
}

type RequestedTrip {
    _id: ObjectId!
    requesterId: ObjectId!
    route: RequestedTripRoute!
    time: TripTime!
    seats: Int!
    vehicleFeatures: RequestedVehicleFeatures!
}

type RequestedVehicleFeatures {
    ac: Boolean
    luggage: Boolean
}

input RequestedTripInput {
    requesterId: ObjectId!
    route: RequestedTripRouteInput!
    time: TripTimeInput!
    seats: Int!
    vehicleFeatures: RequestedVehicleFeaturesInput!
}

input RequestedVehicleFeaturesInput {
    ac: Boolean
    luggage: Boolean
}

#ROUTE==========================================
type HostedTripRoute {
    from: String!
    to: String!
    polyLines: [String!]!
    keyCoords: [[Float!]!]!
    tileOverlapIndex: String!
}

input HostedTripRouteInput {
    from: String! @constraint(pattern: "^[a-zA-Z]{5,30}*$")
    to: String! @constraint(pattern: "^[a-zA-Z]{5,30}*$")
    polyLines: [String!]!
    keyCoords: [[Float!]!]!
    tileOverlapIndex: String!
}

type RequestedTripRoute {
    from: String!
    to: String!
    keyCoords: [[Float!]!]!
}

input RequestedTripRouteInput {
    from: String!
    to: String!
    keyCoords: [[Float!]!]!
}

#HANDSHAKE======================================
type Handshake {
    _id: ObjectId!
    senderId: ObjectId!
    recipientId: ObjectId!
    hostedTripId: ObjectId!
    requestedTripId: ObjectId!
    time: HandshakeTime!
    payment: Payment!
    rating: TripRating!
}

type Payment {
    amount: Float!
    time: Date
}

#TRIP_MATCH====================================
type RequestedTripMatch {
    requestedTripId: ObjectId!
    results: [TripMatchResult!]!
}

type TripMatchResult {
    hostedTripLength: Float!
    requestedTripLength: Float!
    intersectionLength: Float!
    hostedTripCoverage: Float!
    requestedTripCoverage: Float!
    intersectionPolyLine: String!
}

#BANK_ACCOUNT=============================
type BankAccount {
    _id: ObjectId!
    isActive: Boolean!
    ownerId: ObjectId!
    name: String!
    bank: String!
    number: String!
    branch: String!
}

input BankAccountInput {
    ownerId: ObjectId!
    isActive: Boolean!
    name: String!
    bank: String!
    number: String!
    branch: String!
}