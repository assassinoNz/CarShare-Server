scalar ObjectId
scalar Date

#QUERY==========================================
type Query {
    GetMe: User!

    GetMyVehicles: [Vehicle!]!

    GetMyBankAccounts: [BankAccount!]!

    GetMyHostedTrips: [HostedTrip]!
    GetMyRequestedTrips: [RequestedTrip]!

    GetMySentNotifications: [Notification]!
    GetMyReceivedNotifications: [Notification]!

    GetMatchingRequestedTrips(hostedTripId: ObjectId!): [RequestedTripMatch!]!
}

type User {
    _id: ObjectId!
    isActive: Boolean!
    mobile: String!
    email: String!
    preferredName: String!
    currentCoord: [Float!]
    rating: UserRating!
}

type UserRating{
    politeness: Float!
    punctuality: Float!
    driving: Float!
}

type HostedTrip {
    _id: ObjectId!
    host: User!
    route: Route!
    time: TripTime!
    vehicle: Vehicle! #Could be a temporary or saved
    seats: Int!
    billing: TripBilling!
}

type Route {
    from: String!
    to: String!
    polyLines: [String!]
    keyCoords: [[Float!]!]
}

type TripTime {
    schedule: Date!
    start: Date
    end: Date
}

type Vehicle {
    _id: ObjectId!
    isActive: Boolean!
    name: String!
    number: String!
    model: String!
    features: VehicleFeatures!
    rating: VehicleRating!
}

type VehicleFeatures {
    ac: Boolean!
    luggage: Boolean!
}

type VehicleRating {
    cleanliness: Float!
    ac: Float!
}

type TripBilling {
    bankAccount: BankAccount!
    priceFirstKm: Float!
    priceNextKm: Float!
}

type BankAccount {
    _id: ObjectId!
    isActive: Boolean!
    name: String!
    bank: String!
    number: String!
    branch: String!
}

type TripRating {
    punctuality: Float!
    politeness: Float!
    driving: Float!
    meetsCondition: Float!
}

type RequestedTrip {
    _id: ObjectId!
    requester: User!
    route: Route!
    time: TripTime!
    seats: Int!
}

type Notification {
    _id: ObjectId!
    isActive: Boolean!
    sender: User!
    recipient: User!
    hostedTrip: HostedTrip!
    requestedTrip: RequestedTrip!
    time: NotificationTime!
    payment: Payment!
    rating: TripRating!
}

type NotificationTime {
    sent: Date!
    accepted: Date #When there is a time, notification is accepted by recipient
}

type Payment {
    amount: Float!
    time: Date #When there is a time, payment is done
}

type RequestedTripMatch {
    hostedTrip: HostedTrip!
    requestedTrip: RequestedTrip!
    results: [TripMatchResult!]!
}

type TripMatchResult {
    hostedTripLength: Float!
    requestedTripLength: Float!
    intersectionLength: Float!
    hostedTripCoverage: Float!
    requestedTripCoverage: Float!
    intersectionPolyLine: String!
}

#MUTATION========================================
type Mutation {
    CreateUser(user: UserInput!): ObjectId!
    SignIn(mobile: String!, password: String!): String!

    CreateHostedTrip(hostedTrip: HostedTripInput!): ObjectId!
}

input UserInput {
    mobile: String!
    password: String!
    email: String!
    preferredName: String!
}

input HostedTripInput {
    route: RouteInput!
    time: TripTimeInput!
    vehicleId: ObjectId #If vehicle is null, then this must not
    vehicle: VehicleInput  #If vehicleId is null, then this must not
    seats: Int!
    billing: TripBillingInput!
}

input RouteInput {
    from: String!
    to: String!
    polyLines: [String!]
    keyCoords: [[Float!]!]
}

input TripTimeInput {
    schedule: Date!
}

input VehicleInput {
    name: String!
    number: String!
    model: String!
    features: VehicleFeaturesInput!
}

input TripBillingInput {
    bankAccountId: ObjectId!
    priceFirstKm: Float!
    priceNextKm: Float!
}

input VehicleFeaturesInput {
    ac: Boolean!
    luggage: Boolean!
}