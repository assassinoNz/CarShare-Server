scalar ObjectId
scalar Date

#ROOT===========================================
type Query {
    GetMe: User!
    GetMyVehicles(skip: Int, limit: Int @constraint(max: 10)): [Vehicle!]!
    GetMyBankAccounts(skip: Int, limit: Int @constraint(max: 10)): [BankAccount!]!

    GetMyHostedTrips(
        from: Date,
        to: Date,
        skip: Int,
        limit: Int @constraint(max: 10)
    ): [HostedTrip]!
    GetMyHostedTrip(_id: ObjectId!): HostedTrip!

    GetMyRequestedTrips(
        from: Date,
        to: Date,
        skip: Int,
        limit: Int @constraint(max: 10)
    ): [RequestedTrip]!
    GetMyRequestedTrip(_id: ObjectId!): RequestedTrip!

    GetMyHandshakes(
        tripId: ObjectId,
        sent: Boolean,
        state: HandshakeState,
        skip: Int,
        limit: Int @constraint(max: 10)
    ): [Handshake]!
    GetMyHandshake(_id: ObjectId!): Handshake!

    GetMatchingRequestedTrips(hostedTripId: ObjectId!): [RequestedTrip!]!
}

type Mutation {
    CreateGenericUser(user: UserInput!): String!
    SignIn(mobile: String!, password: String!): String!

    AddVehicle(vehicle: VehicleInput!): ObjectId!

    AddBankAccount(bankAccount: BankAccountInput!): ObjectId!

    AddHostedTrip(hostedTrip: HostedTripInput!): ObjectId!

    AddRequestedTrip(requestedTrip: RequestedTripInput!): ObjectId!

    InitHandshake(
        hostedTripId: ObjectId!,
        requestedTripId: ObjectId!
    ): ObjectId!

    UpdateHostedTripState(
        hostedTripId: ObjectId!,
        state: TripState!,
        coord: [Float!]!
    ): Boolean!

    UpdateHandshakeState(
        handshakeId: ObjectId!,
        state: HandshakeState!
        coord: [Float!]
    ): Boolean!
}

#USER===========================================
type User {
    _id: ObjectId!
    isActive: Boolean!
    mobile: String!
    email: String!
    preferredName: String!
    currentCoord: [Float!]
    rating: UserRating!
}

input UserInput {
    "@constraint(pattern: ^\\+94\\d{9}$)"
    mobile: String! @constraint(pattern: "^\\+94\\d{9}$")

    "@constraint(minLength: 4)"
    password: String! @constraint(minLength: 4)

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    preferredName: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")

    email: String! @constraint(format: "email")
}

#RATING=========================================
type HostRating {
    politeness: Float!,
    punctuality: Float!,
    driving: Float!,
    meetsCondition: Float!,
}

type RequesterRating {
    politeness: Float!,
    punctuality: Float!,
}

type VehicleRating {
    cleanliness: Float!
    ac: Float!
}

type UserRating{
    asHost: HostRating!
    asRequester: RequesterRating!
}

type TripRating {
    host: HostRating!
    requester: RequesterRating!
    vehicle: VehicleRating!
}

#VEHICLE========================================
enum VehicleType {
    PERSONAL STAFF_SERVICE HIRED
}

enum VehicleClass {
    CAR VAN BIKE LORRY THREE_WHEELER
}

type Vehicle {
    _id: ObjectId
    isActive: Boolean!
    type: VehicleType!
    class: VehicleClass!
    name: String!
    number: String!
    model: String!
    features: VehicleFeatures!
    rating: VehicleRating!
}

input VehicleInput {
    type: VehicleType!
    class: VehicleClass!

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    name: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    number: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    model: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")

    features: VehicleFeaturesInput!
}

type VehicleFeatures {
    ac: Boolean!
    luggage: Boolean!
}

input VehicleFeaturesInput {
    ac: Boolean!
    luggage: Boolean!
}

#TRIP===========================================
enum TripState {
    STARTED ENDED
}

type HostedTrip {
    _id: ObjectId!
    host: User!
    route: HostedTripRoute!
    time: TripTime!
    vehicle: Vehicle! #Could be a temporary or saved
    seats: Int!
    remainingSeats: Int!
    billing: TripBilling!
    hasHandshakes: Boolean!
}

input HostedTripInput {
    route: HostedTripRouteInput!
    time: TripTimeInput!
    vehicleId: ObjectId #If vehicle is null, then this must not
    vehicle: VehicleInput  #If vehicleId is null, then this must not

    "@constraint(min: 1)"
    seats: Int! @constraint(min: 1)

    billing: TripBillingInput!
}

type TripTime {
    schedule: Date!
    started: Date #If this is available and "end" is not available, trip is ongoing
    ended: Date
}

input TripTimeInput {
    schedule: Date!
}

type TripBilling {
    bankAccount: BankAccount!
    priceFirstKm: Float!
    priceNextKm: Float!
}

input TripBillingInput {
    bankAccountId: ObjectId!

    "@constraint(min: 0)"
    priceFirstKm: Float! @constraint(min: 0)

    "@constraint(min: 0)"
    priceNextKm: Float! @constraint(min: 0)
}

type RequestedTrip {
    _id: ObjectId!
    requester: User!
    route: RequestedTripRoute!
    time: TripTime!
    seats: Int!
    vehicleFeatures: RequestedVehicleFeatures!
    hasHandshakes: Boolean!
}

type RequestedVehicleFeatures {
    ac: Boolean
    luggage: Boolean
}

input RequestedTripInput {
    route: RequestedTripRouteInput!
    time: TripTimeInput!

    "@constraint(min: 1)"
    seats: Int! @constraint(min: 1)

    vehicleFeatures: RequestedVehicleFeaturesInput!
}

input RequestedVehicleFeaturesInput {
    ac: Boolean
    luggage: Boolean
}

#ROUTE==========================================
type HostedTripRoute {
    from: String!
    to: String!
    polyLines: [String!]!
    keyCoords: [[Float!]!]! #[[lat, long]]
}

input HostedTripRouteInput {
    from: String!
    to: String!

    "@constraint(minItems: 2)"
    polyLines: [String!]! @constraint(minItems: 1)

    "An array of [lat, long] arrays. @constraint(minItems: 2)"
    keyCoords: [[Float!]!]! @constraint(minItems: 2) #[[lat, long]]
}

type RequestedTripRoute {
    from: String!
    to: String!
    keyCoords: [[Float!]!]! #[[lat, long]]
}

input RequestedTripRouteInput {
    from: String!
    to: String!

    "An array of [lat, long] arrays. @constraint(minItems: 2)"
    keyCoords: [[Float!]!]! @constraint(minItems: 2) #[[lat, long]]
}

#HANDSHAKE======================================
enum HandshakeState {
    INITIATED #Done by sender
    SEEN #Done by recipient
    ACCEPTED #Done by recipient
    CONFIRMED_ACCEPTED #Done by sender
    #STARTED_HOSTED_TRIP #Done by host
    STARTED_REQUESTED_TRIP #Done by host
    CONFIRMED_STARTED_REQUESTED_TRIP #Done by requester
    ENDED_REQUESTED_TRIP #Done by requester
    CONFIRMED_ENDED_REQUESTED_TRIP #Done by host
    DONE_PAYMENT #Done by host
    #ENDED_HOSTED_TRIP #Done by host
    CANCELLED #Done by sender/recipient
}

type Handshake {
    _id: ObjectId!
    sender: User!
    recipient: User!
    hostedTrip: HostedTrip!
    requestedTrip: RequestedTrip!
    payment: Payment!
    rating: TripRating!
    time: HandshakeTime!
}

type Payment {
    amount: Float!
}

type HandshakeTime {
    initiated: Date!
    seen: Date
    accepted: Date
    startedRequestedTrip: Date
    confirmedRequestedTripStart: Date
    endedRequestedTrip: Date
    confirmedRequestedTripEnd: Date
    paymentDone: Date
    cancelled: Date
}

#BANK_ACCOUNT=============================
type BankAccount {
    _id: ObjectId!
    isActive: Boolean!
    name: String!
    bank: String!
    number: String!
    branch: String!
}

input BankAccountInput {
    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    name: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    bank: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    number: String! @constraint(pattern: "^[0-9\\s]{3,20}$")

    "@constraint(pattern: ^[a-zA-Z0-9\\s]{3,20}$)"
    branch: String! @constraint(pattern: "^[a-zA-Z0-9\\s]{3,20}$")
}